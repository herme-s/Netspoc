#!/usr/bin/perl

=head1 NAME

cut-netspoc - Print parts of a netspoc configuration to stdout

=head1 SYNOPSIS

cut-netspoc [options] FILE|DIR [service:name] ...

=head1 DESCRIPTION

Reads a Netspoc configuration and prints parts of this configuration
to STDOUT. If one or more services are given as argument, only those
parts are printed, that are referenced by given serices. If no service
is given, it acts as if all services are specified. This is useful to
eliminate all disabled parts of the topology.

=head1 OPTIONS

=item B<-q>

Quiet, don't print status messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2018 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::File qw(process_file_or_dir *input);
use Netspoc::Compiler::Common;
use Netspoc::Compiler::Pass1;
use Encode qw(decode_utf8);

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################
my ($quiet, $help, $man, $ipv6);

GetOptions ( 'quiet!' => \$quiet,
             'ipv6'   => \$ipv6,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $path = shift @ARGV;

# Give each source part an index to preserve original order.
my $src_index = 1;

# Enhanced version of parse_input, which stores source code of each
# global definition.
sub parse_input_with_src {
    my $length = length $input;
    while (skip_space_and_comment, pos $input != $length) {
        my $pre    = pos $input;
        my $object = parse_toplevel();
        my $post   = pos $input;
        $object->{src_code} = substr $input, $pre, $post - $pre;
        $object->{src_index} = $src_index++;
    }
}

sub change_attribute_src_code {
    my ($attr, $object, $replace) = @_;
    my $code = $object->{src_code};

    # Find attribute outside of comment.
    $code =~ m/ ^[^#]* \Q$attr\E (?=[\s;=#]) /gmx;
    my $start = pos($code) - length($attr);

    # Helper functions to parse attribute value.
    my $skip_space_and_comment = sub {
        $code =~ /\G (?:(?: [#] .* (?: \n | $ )) | \s*)*/gcx;
    };
    my $check = sub {
        my ($string) = @_;
        $skip_space_and_comment->();
        return $code =~ /\G\Q$string\E/gc;
    };
    my $read_token = sub {
        $skip_space_and_comment->();
        $code =~ /\G [^=,;\s#]* /gcx;
    };
    my $read_attr_body;
    $read_attr_body = sub {
        if ($check->(';')) {

            # Attribute has no value; finished.
        }
        elsif ($check->('=')) {

            # Read complex value.
            if ($check->('{')) {
                if ($check->('description')) {
                    $check->('=');
                    $code =~ /\G .* \n/gcx;
                }
                while (1) {
                    last if $check->('}');
                    $read_token->();
                    $read_attr_body->();
                }
            }

            # Read comma separated list of values.
            else {
                while (1) {
                    last if $check->(';');
                    $read_token->();
                    $check->(',');
                }
            }
        }
    };
    $read_attr_body->();
    my $end = pos($code);

    # Remove leading white space and trailing line break.
    if (not $replace) {

        # Find trailing line break.
        $code =~ /\G [ \t]* (?: [#] .* )? (?: \n | $ )/gcx;
        $end = pos($code);

        # Find leading white space.
        pos($code) = $start;
        if ($code =~ /([ \t]*)\G/g) {
            $start -= length($1);
        }
    }
    my $len = $end - $start;
    substr($object->{src_code}, $start, $len) = $replace;
}

sub remove_attribute_src_code {
    my ($attr, $object) = @_;
    change_attribute_src_code($attr, $object, '');
}

# Collect objects, that will be shown in output.
my %is_used;

# Collect networks that need to be connected by unmanaged parts of topology.
my @todo_unmanaged;

# This function is called by path_walk to mark all managed routers
# on path from src to dst of $rule with attribute {is_used}.
sub mark_topology {
    my (undef, $in_intf, $out_intf) = @_;
    my $router = ($in_intf || $out_intf)->{router};
    $is_used{$router} = 1;
#    debug "Used $router->{name}";
    for my $intf ($in_intf, $out_intf) {
        $intf or next;
        my $network = $intf->{network};
        $is_used{$intf} = 1;
        $is_used{$network} = 1;
        push @todo_unmanaged, $network;
    }
}

# Mark unmanaged routers and networks
# between marked and managed parts of topology.
sub path_unmanaged {
    my ($obj, $in_interface) = @_;
    return 1 if $is_used{$obj};
    return if $obj->{managed} || $obj->{semi_managed};
    return if $obj->{active_path};

    local $obj->{active_path} = 1;
    my $result = 0;
    for my $interface (@{ $obj->{interfaces} }) {
        next if $interface eq $in_interface;
        next if $interface->{main_interface};
        my $next = $interface->{is_network($obj) ? 'router' : 'network'};
        if (path_unmanaged($next, $interface)) {
            $is_used{$obj} = 1;
            $is_used{$interface} = 1;
#            debug "Marked $interface->{name}";
            $result = 1;
        }
    }
    return $result;
}

sub mark_unmanaged {
    progress('Marking unmanged routers');
    for my $network (@todo_unmanaged) {
#        debug "Path unmanaged $network->{name}";
        for my $interface (@{ $network->{interfaces} }) {
            next if $interface->{main_interface};
            my $router = $interface->{router};
#            debug "Try $router->{name} $interface->{name}";
            if (path_unmanaged($router, $interface)) {
                $is_used{$interface} = 1;
#                debug "Marked $interface->{name}";
            }
        }
    }
    @todo_unmanaged = ();
}

sub mark_path {
    my ($src, $dst) = @_;
    my $rule = {src => $src, dst => $dst, prt => {}};
#    debug "Path $src->{name} $dst->{name}";
    &single_path_walk($rule, \&mark_topology);
    return;
}

# We can't use %aggregates from Netspoc.pm because it only holds named
# aggregates. But we need unnamed aggregates like any:[network:XX]
# as well.
my @all_zones;
sub get_zones {
    my %all_zones;
    for my $network (values %networks) {
        next if $network->{disabled};
        my $zone = $network->{zone};
        $all_zones{$zone} = $zone;
    }
    @all_zones = values %all_zones;
    return;
}

####################################################################
# Main program
####################################################################

my $file_config = read_config($path);
$config = combine_config($file_config,
                    {time_stamps => 1, max_errors => 9999, verbose => !$quiet,
                     ipv6 => $ipv6? 1 : 0 });
init_global_vars();
show_version();

# Read and process netspoc configuration data.
# Remember source code of each global definition.
process_file_or_dir($path, \&parse_input_with_src);

my %name2var = ( service => \%services);

if (@ARGV) {

    # Read names of services from command line.
    for my $arg (map { decode_utf8($_, 1) } @ARGV) {
        my ($type, $name) = split_typed_name $arg;
        my $ref = $name2var{$type} or pod2usage(2);
        my $thing = $ref->{$name} or fatal_err "Unknown $arg";
        $is_used{$thing} = 1;
    }

    # Delete unwanted global definitions.
    for my $ref (values %name2var) {
        for my $name (keys %$ref) {
            $is_used{$ref->{$name}} or delete $ref->{$name};
        }
    }
}

# Retain all services, if no argument is given.
# Only remove disabled parts.

&order_protocols();
&link_topology();
&mark_disabled();
&set_zone();
&setpath();
&distribute_nat_info();
find_subnets_in_zone();
link_reroute_permit();
normalize_services();
group_path_rules();

# Process rules of services.
sub process_rules {
    my ($path_rules) = @_;
    for my $rule (@{ $path_rules->{deny} }, @{ $path_rules->{permit} }) {
        my ($src_list, $dst_list) = @{$rule}{qw(src dst)};
        for my $obj (@$src_list, @$dst_list) {

            # path_walk only handles managed routers and interfaces.
            # Mark all objects additionally here.
            my $type = ref $obj;
            if ($type eq 'Network') {
#	             debug "Used $obj->{name}";
                $is_used{$obj} = 1;
            }
            elsif ($type eq 'Host') {
                $is_used{$obj} = 1;
#	        debug "Used $obj->{name}";
                $is_used{$obj->{network}} = 1;
            }
            elsif ($type eq 'Interface') {
                $is_used{$obj} = 1;
#	        debug "Used $obj->{name}";
                $is_used{$obj->{router}} = 1;
                $is_used{$obj->{network}} = 1;
            }
        }
        &path_walk($rule, \&mark_topology);
    }
    return;
}

# Collect objects, that are referenced, but not visible in rules:
# Groups, networks, interfaces, hosts from negated part of intersection.
# These need to be connected with other parts of topology
# by managed an unmanaged routers.
my @todo_managed;
for my $global (\%groups, \%networks, \%hosts, \%interfaces, 
                \%aggregates, \%areas) 
{
    for my $obj (values %$global) {
        $obj->{is_used} or next;
        next if $is_used{$obj};
        $is_used{$obj} = 1;
        push @todo_managed, $obj;
    }
}
        
# Mark parts of topology which are referenced by rules of services.
process_rules(\%path_rules);

# Mark networks inside marked aggregates.
get_zones();
for my $zone (@all_zones) {
    for my $aggregate (values %{ $zone->{ipmask2aggregate} }) {
        $is_used{$aggregate} or next;
#        debug "Marking networks of $aggregate->{name} in $zone->{name}";
        for my $network (@{ $aggregate->{networks} }) {
            $is_used{$network} = 1;
        }
    }
}

# Mark zones having attributes that influence their networks.
for my $network (values %networks) {
    $is_used{$network} or next;
    my $zone = $network->{zone};
    my $zero_ip = get_zero_ip($zone->{ipv6});
    my $aggregate0 = $zone->{ipmask2aggregate}->{"$zero_ip$zero_ip"};

    # Simplifies test below.
    $aggregate0->{owner} = $zone->{owner};

    grep { $zone->{$_} } qw(has_unenforceable nat no_in_acl) or next;
    $is_used{$aggregate0} = 1;
    $is_used{$zone} = 1;
}

for my $zone (@all_zones) {
    $is_used{$zone} or next;
    if (my $link = $zone->{link}) {
        $is_used{$link} = 1;
    }
}

# Mark areas having attributes that influence their networks.
for my $zone (@all_zones) {
    $is_used{$zone} or next;
    for my $area (values %{ $zone->{areas} }) {
        $area->{nat} or next;
        $is_used{$area} = 1;
    }
}

# Mark interfaces / networks which are referenced by used areas.
for my $area (values %areas) {
    $is_used{$area} or next;
    if (my $anchor = $area->{anchor}) {
        $is_used{$anchor} = 1;
        push @todo_managed, $anchor;
    }
    else {
        for my $interface (@{ $area->{border} }, @{ $area->{inclusive_border} })
        {
            push @todo_managed, 
                $interface,
                $interface->{router},
                $interface->{network};
            $is_used{$interface} = 1;
            $is_used{$interface->{router}} = 1;
            $is_used{$interface->{network}} = 1;
        }
    }
}

# Mark networks having NAT attributes that influence their subnets.
for my $network (values %networks) {
    $is_used{$network} or next;
    my $up = $network;
    my @up_chain;

    # Walk chain of inheritance.
    # Mark supernet with NAT attribute and also all supernets in between.
    # We need to mark supernets in between, because they might have
    # identity NAT attributes, which have been deleted already.
    while ($up = $up->{up}) {
        if ($up->{is_aggregate}) {
            is_zero_ip($up->{mask}) or next;
            my $zone = $up->{zone};

            # Check if NAT attribute was inherited from zone or areas.
            $is_used{$zone} or
                grep { $is_used{$_} } values %{ $zone->{areas} } or
                next;
        }
        else {
            push @up_chain, $up;
            $up->{nat} or next;
        }
        for my $supernet (@up_chain) {
            $is_used{$supernet} = 1;
            push @todo_unmanaged, $supernet;
#            debug "marked: $supernet->{name}";
        }
        @up_chain = ();
    }
}

# Call this after topology has been marked.
&expand_crypto();

# 1. call to mark unmanaged parts of topology.
# Needed to mark unmanaged crypto routers.
mark_unmanaged();

# Mark bridge and bridged networks.
for my $network (values %networks) {
    $is_used{$network} or next;
    $network->{bridged} or next;
    for my $bridge_in (@{ $network->{interfaces} }) {
        $bridge_in->{ip} eq 'bridged' or next;
        $is_used{$bridge_in} = 1;
        my $bridge = $bridge_in->{router};
        $is_used{$bridge} = 1;
        for my $bridge_out (@{ $bridge->{interfaces} }) {
            if ($bridge_out->{hardware}->{name} eq 'device' &&
                $bridge->{model}->{class} eq 'ASA') {
                $is_used{$bridge_out} = 1;
            }
            elsif ($bridge_out->{ip} eq 'bridged') {
                $is_used{$bridge_out} = 1;
                $is_used{$bridge_out->{network}} = 1;
            }
        }
    }
}

for my $router (values %routers, values %routers6) {

    # Mark split router, if some split part is marked.
    for my $interface (get_intf($router)) {
        my $fragment = $interface->{router};
        next if $fragment eq $router;
        $is_used{$fragment} or next;
#        debug "From split: $router->{name}";
        $is_used{$router} = 1;
    }

    $is_used{$router} or next;

    # Mark fragments of marked crypto routers.
    for my $interface (get_intf($router)) {
        my $fragment = $interface->{router};
        next if $fragment eq $router;
#        debug "Fragment: $fragment->{name}";
        $is_used{$fragment} = 1;
    }

    for my $interface (get_intf($router)) {
        $is_used{$interface} or next;

        # Mark main interface of secondary or virtual interface.
        if (my $main = $interface->{main_interface} || $interface->{orig_main})
        {
            $is_used{$main} = 1;
        }

        # Mark path of crypto tunnel.
        if ($interface->{ip} eq 'tunnel') {
            my $peer = $interface->{peer};
            my $real_intf = $interface->{real_interface};
            mark_path($real_intf, $peer->{real_interface});
        }
    }
}

# 2. call to mark unmanaged parts of topology.
# Needed to mark crypto path of crypto routers.
mark_unmanaged();

for my $router (values %routers, values %routers6) {
    $is_used{$router} or next;
    for my $interface (get_intf($router)) {
        $is_used{$interface} or next;

	# Remove unused networks referenced in attribute reroute_permit.
	if (my $networks = $interface->{reroute_permit}) {
            my @used_networks = grep { $is_used{$_} } @$networks;
            if (not @used_networks) {
                remove_attribute_src_code('reroute_permit', $router);
            }
            elsif(@$networks != @used_networks) {
                my $used_net_names =
                    join ', ', map { $_->{name} } @used_networks;
                my $new_code = "reroute_permit = $used_net_names;";
                change_attribute_src_code('reroute_permit', $router, $new_code);
            }
	}

	# Mark crypto definitions which are referenced by
	# already marked interfaces.
        if (my $crypto_list = $interface->{hub}) {
            for my $crypto (@$crypto_list) {
                $is_used{$crypto} = 1;
                my $type = $crypto->{type};
                $is_used{$type} = 1;
                $is_used{$type->{key_exchange}} = 1;
            }
        }

        # Mark networks referenced by interfaces
        # implictly marked by expand_group.
        if ($is_used{$interface}) {
            $is_used{$interface->{network}} = 1;
        }
    }
}

# Remove definitions of unused hosts from networks.
progress('Removing unused hosts');
for my $network (values %networks) {
    $is_used{$network} or next;
    my $hosts = $network->{hosts};

    # Retain at least one host of network with ID hosts.
    if ($network->{has_id_hosts}) {
        if (not grep { $is_used{$_} } @$hosts) {
            $is_used{$hosts->[0]} = 1;
        }
    }

    for my $host (@$hosts) {
        next if $is_used{$host};
        my $name = $host->{name};

        # Remove trailing network name of ID-host.
        if ($name =~ /^host:id:/) {
            $name =~ s/ [.] [^.]+ $ //x;
        }
#        progress("- $name");
        remove_attribute_src_code($name, $network);
    }
}

# Remove definitions of unused interfaces from routers
progress('Removing unused interfaces');
for my $router (values %routers, values %routers6) {
    $is_used{$router} or next;
    for my $interface (get_intf($router)) {
        next if $is_used{$interface};
        next if $interface->{ip} eq 'tunnel';

        # Rename "interface:router.network" to "interface:network".
        my $name = $interface->{name};
        $name =~ s/ : [^.]+ [.] /:/x;

        # Ignore secondary and virtual interfaces.
        next if $name =~ s/[.]\w+$//;

#        progress("- $interface->{name}");
        remove_attribute_src_code($name, $router);
    }
}

# Remove one or multiple occurences of attribute 'owner'.
# Multiple from embedded host or interface definiton.
progress('Removing referenced owners');
for my $object (values %networks,
                values %routers, values %routers6,
                values %areas, values %aggregates)
{
    $is_used{$object} or next;
    $object->{src_code} or next;
    while ($object->{src_code} =~ /^[^#]*owner *=/m) {
#        progress("- $object->{name}");
        remove_attribute_src_code('owner', $object);
    }
}

# Remove attribute 'sub_owner'.
progress('Removing referenced sub_owners');
for my $service (values %services) {
    $service->{sub_owner} or next;
    remove_attribute_src_code('sub_owner', $service);
}

# Remove attribute 'router_attributes'
# with 'owner', 'policy_distribution_point' and 'general_permit'.
for my $area (values %areas) {
    $is_used{$area} or next;
    $area->{router_attributes} or next;
    remove_attribute_src_code('router_attributes', $area);
}

# Remove attribute 'policy_distribution_point'
progress('Removing referenced policy_distribution_point');
for my $router (values %routers, values %routers6) {
    $is_used{$router} or next;
    $router->{policy_distribution_point} or next;
    $router->{src_code} =~ /^[^#]policy_distribution_point/m or next;
    remove_attribute_src_code('policy_distribution_point', $router);
}

sub by_index {
    return $a->{src_index} <=> $b->{src_index}
}

# Print marked parts of netspoc configuration.
# Routers and networks have been marked by mark_topology.
# Protocols have been marked while @path_rules have been processed above.
# Groups and protocolroups objects have been marked during expand_services.
for my $object ( sort by_index map { $_->{src_index} ? ($_) : () }
    values %routers,
    values %routers6,
    values %networks,
    values %aggregates,
    values %areas,
    values %groups,
    values %isakmp,
    values %ipsec,
    values %crypto,
  )
{
    if ($is_used{$object}) {

        # There are some internal objects without src_code.
        if (my $src_code = $object->{src_code}) {
            print $src_code, "\n";
        }
    }
}

for my $object ( sort by_index map { $_->{src_index} ? ($_) : () }
                 values %protocols,
                 values %protocolgroups,)
{
    $object->{is_used} or next;
    print $object->{src_code}, "\n";
}

# Source of pathrestrictions can't be used literally,
# but must be reconstructed from internal data structure.
for my $restrict (sort by_index values %pathrestrictions) {
    my $used = 0;
    for my $interface (@{ $restrict->{elements} }) {
        if ($is_used{$interface}) {
            $used++;
        }
        else {
            $interface = undef;
        }
    }
    next if $used < 2;
    print "$restrict->{name} =\n";
    for my $interface (@{ $restrict->{elements} }) {
        next unless $interface;
        next if $interface->{ip} eq 'tunnel';
        print " $interface->{name},\n";
    }
    print ";\n";
}

# All unwanted services have already been deleted above.
for my $service (sort by_index values %services) {
    next if $service->{disabled};
    print $service->{src_code}, "\n";
}
